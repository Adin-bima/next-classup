
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Teacher` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Teacher
 * 
 */
export type TeacherModel = runtime.Types.Result.DefaultSelection<Prisma.$TeacherPayload>

export type AggregateTeacher = {
  _count: TeacherCountAggregateOutputType | null
  _min: TeacherMinAggregateOutputType | null
  _max: TeacherMaxAggregateOutputType | null
}

export type TeacherMinAggregateOutputType = {
  id: string | null
  user_id: string | null
  school_id: string | null
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

export type TeacherMaxAggregateOutputType = {
  id: string | null
  user_id: string | null
  school_id: string | null
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

export type TeacherCountAggregateOutputType = {
  id: number
  user_id: number
  school_id: number
  created_at: number
  updated_at: number
  deleted_at: number
  _all: number
}


export type TeacherMinAggregateInputType = {
  id?: true
  user_id?: true
  school_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
}

export type TeacherMaxAggregateInputType = {
  id?: true
  user_id?: true
  school_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
}

export type TeacherCountAggregateInputType = {
  id?: true
  user_id?: true
  school_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
  _all?: true
}

export type TeacherAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Teacher to aggregate.
   */
  where?: Prisma.TeacherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teachers to fetch.
   */
  orderBy?: Prisma.TeacherOrderByWithRelationInput | Prisma.TeacherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeacherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teachers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teachers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Teachers
  **/
  _count?: true | TeacherCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeacherMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeacherMaxAggregateInputType
}

export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
      [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeacher[P]>
    : Prisma.GetScalarType<T[P], AggregateTeacher[P]>
}




export type TeacherGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherWhereInput
  orderBy?: Prisma.TeacherOrderByWithAggregationInput | Prisma.TeacherOrderByWithAggregationInput[]
  by: Prisma.TeacherScalarFieldEnum[] | Prisma.TeacherScalarFieldEnum
  having?: Prisma.TeacherScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeacherCountAggregateInputType | true
  _min?: TeacherMinAggregateInputType
  _max?: TeacherMaxAggregateInputType
}

export type TeacherGroupByOutputType = {
  id: string
  user_id: string
  school_id: string
  created_at: Date
  updated_at: Date
  deleted_at: Date | null
  _count: TeacherCountAggregateOutputType | null
  _min: TeacherMinAggregateOutputType | null
  _max: TeacherMaxAggregateOutputType | null
}

type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeacherGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeacherGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeacherGroupByOutputType[P]>
      }
    >
  >



export type TeacherWhereInput = {
  AND?: Prisma.TeacherWhereInput | Prisma.TeacherWhereInput[]
  OR?: Prisma.TeacherWhereInput[]
  NOT?: Prisma.TeacherWhereInput | Prisma.TeacherWhereInput[]
  id?: Prisma.StringFilter<"Teacher"> | string
  user_id?: Prisma.StringFilter<"Teacher"> | string
  school_id?: Prisma.StringFilter<"Teacher"> | string
  created_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  deleted_at?: Prisma.DateTimeNullableFilter<"Teacher"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  subjects?: Prisma.SubjectListRelationFilter
  schedules?: Prisma.ScheduleListRelationFilter
  Exam?: Prisma.ExamListRelationFilter
  Behaviour?: Prisma.BehaviourListRelationFilter
}

export type TeacherOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  school_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  school?: Prisma.SchoolOrderByWithRelationInput
  subjects?: Prisma.SubjectOrderByRelationAggregateInput
  schedules?: Prisma.ScheduleOrderByRelationAggregateInput
  Exam?: Prisma.ExamOrderByRelationAggregateInput
  Behaviour?: Prisma.BehaviourOrderByRelationAggregateInput
}

export type TeacherWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  user_id?: string
  AND?: Prisma.TeacherWhereInput | Prisma.TeacherWhereInput[]
  OR?: Prisma.TeacherWhereInput[]
  NOT?: Prisma.TeacherWhereInput | Prisma.TeacherWhereInput[]
  school_id?: Prisma.StringFilter<"Teacher"> | string
  created_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  deleted_at?: Prisma.DateTimeNullableFilter<"Teacher"> | Date | string | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  school?: Prisma.XOR<Prisma.SchoolScalarRelationFilter, Prisma.SchoolWhereInput>
  subjects?: Prisma.SubjectListRelationFilter
  schedules?: Prisma.ScheduleListRelationFilter
  Exam?: Prisma.ExamListRelationFilter
  Behaviour?: Prisma.BehaviourListRelationFilter
}, "id" | "id" | "user_id">

export type TeacherOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  school_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TeacherCountOrderByAggregateInput
  _max?: Prisma.TeacherMaxOrderByAggregateInput
  _min?: Prisma.TeacherMinOrderByAggregateInput
}

export type TeacherScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeacherScalarWhereWithAggregatesInput | Prisma.TeacherScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeacherScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeacherScalarWhereWithAggregatesInput | Prisma.TeacherScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Teacher"> | string
  user_id?: Prisma.StringWithAggregatesFilter<"Teacher"> | string
  school_id?: Prisma.StringWithAggregatesFilter<"Teacher"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Teacher"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Teacher"> | Date | string
  deleted_at?: Prisma.DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
}

export type TeacherCreateInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateManyInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
}

export type TeacherUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeacherUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TeacherNullableScalarRelationFilter = {
  is?: Prisma.TeacherWhereInput | null
  isNot?: Prisma.TeacherWhereInput | null
}

export type TeacherListRelationFilter = {
  every?: Prisma.TeacherWhereInput
  some?: Prisma.TeacherWhereInput
  none?: Prisma.TeacherWhereInput
}

export type TeacherOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeacherCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  school_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type TeacherMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  school_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type TeacherMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  school_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type TeacherScalarRelationFilter = {
  is?: Prisma.TeacherWhereInput
  isNot?: Prisma.TeacherWhereInput
}

export type TeacherCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutUserInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutUserInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutUserInput
  upsert?: Prisma.TeacherUpsertWithoutUserInput
  disconnect?: Prisma.TeacherWhereInput | boolean
  delete?: Prisma.TeacherWhereInput | boolean
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutUserInput, Prisma.TeacherUpdateWithoutUserInput>, Prisma.TeacherUncheckedUpdateWithoutUserInput>
}

export type TeacherUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutUserInput
  upsert?: Prisma.TeacherUpsertWithoutUserInput
  disconnect?: Prisma.TeacherWhereInput | boolean
  delete?: Prisma.TeacherWhereInput | boolean
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutUserInput, Prisma.TeacherUpdateWithoutUserInput>, Prisma.TeacherUncheckedUpdateWithoutUserInput>
}

export type TeacherCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput> | Prisma.TeacherCreateWithoutSchoolInput[] | Prisma.TeacherUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchoolInput | Prisma.TeacherCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TeacherCreateManySchoolInputEnvelope
  connect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
}

export type TeacherUncheckedCreateNestedManyWithoutSchoolInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput> | Prisma.TeacherCreateWithoutSchoolInput[] | Prisma.TeacherUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchoolInput | Prisma.TeacherCreateOrConnectWithoutSchoolInput[]
  createMany?: Prisma.TeacherCreateManySchoolInputEnvelope
  connect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
}

export type TeacherUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput> | Prisma.TeacherCreateWithoutSchoolInput[] | Prisma.TeacherUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchoolInput | Prisma.TeacherCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TeacherUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TeacherCreateManySchoolInputEnvelope
  set?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  disconnect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  delete?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  connect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  update?: Prisma.TeacherUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TeacherUpdateManyWithWhereWithoutSchoolInput | Prisma.TeacherUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TeacherScalarWhereInput | Prisma.TeacherScalarWhereInput[]
}

export type TeacherUncheckedUpdateManyWithoutSchoolNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput> | Prisma.TeacherCreateWithoutSchoolInput[] | Prisma.TeacherUncheckedCreateWithoutSchoolInput[]
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchoolInput | Prisma.TeacherCreateOrConnectWithoutSchoolInput[]
  upsert?: Prisma.TeacherUpsertWithWhereUniqueWithoutSchoolInput | Prisma.TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
  createMany?: Prisma.TeacherCreateManySchoolInputEnvelope
  set?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  disconnect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  delete?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  connect?: Prisma.TeacherWhereUniqueInput | Prisma.TeacherWhereUniqueInput[]
  update?: Prisma.TeacherUpdateWithWhereUniqueWithoutSchoolInput | Prisma.TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
  updateMany?: Prisma.TeacherUpdateManyWithWhereWithoutSchoolInput | Prisma.TeacherUpdateManyWithWhereWithoutSchoolInput[]
  deleteMany?: Prisma.TeacherScalarWhereInput | Prisma.TeacherScalarWhereInput[]
}

export type TeacherCreateNestedOneWithoutSubjectsInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSubjectsInput, Prisma.TeacherUncheckedCreateWithoutSubjectsInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSubjectsInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUpdateOneRequiredWithoutSubjectsNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSubjectsInput, Prisma.TeacherUncheckedCreateWithoutSubjectsInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSubjectsInput
  upsert?: Prisma.TeacherUpsertWithoutSubjectsInput
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutSubjectsInput, Prisma.TeacherUpdateWithoutSubjectsInput>, Prisma.TeacherUncheckedUpdateWithoutSubjectsInput>
}

export type TeacherCreateNestedOneWithoutSchedulesInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchedulesInput, Prisma.TeacherUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchedulesInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUpdateOneRequiredWithoutSchedulesNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutSchedulesInput, Prisma.TeacherUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutSchedulesInput
  upsert?: Prisma.TeacherUpsertWithoutSchedulesInput
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutSchedulesInput, Prisma.TeacherUpdateWithoutSchedulesInput>, Prisma.TeacherUncheckedUpdateWithoutSchedulesInput>
}

export type TeacherCreateNestedOneWithoutBehaviourInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutBehaviourInput, Prisma.TeacherUncheckedCreateWithoutBehaviourInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutBehaviourInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUpdateOneRequiredWithoutBehaviourNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutBehaviourInput, Prisma.TeacherUncheckedCreateWithoutBehaviourInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutBehaviourInput
  upsert?: Prisma.TeacherUpsertWithoutBehaviourInput
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutBehaviourInput, Prisma.TeacherUpdateWithoutBehaviourInput>, Prisma.TeacherUncheckedUpdateWithoutBehaviourInput>
}

export type TeacherCreateNestedOneWithoutExamInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutExamInput, Prisma.TeacherUncheckedCreateWithoutExamInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutExamInput
  connect?: Prisma.TeacherWhereUniqueInput
}

export type TeacherUpdateOneRequiredWithoutExamNestedInput = {
  create?: Prisma.XOR<Prisma.TeacherCreateWithoutExamInput, Prisma.TeacherUncheckedCreateWithoutExamInput>
  connectOrCreate?: Prisma.TeacherCreateOrConnectWithoutExamInput
  upsert?: Prisma.TeacherUpsertWithoutExamInput
  connect?: Prisma.TeacherWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TeacherUpdateToOneWithWhereWithoutExamInput, Prisma.TeacherUpdateWithoutExamInput>, Prisma.TeacherUncheckedUpdateWithoutExamInput>
}

export type TeacherCreateWithoutUserInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutUserInput = {
  id?: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutUserInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
}

export type TeacherUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutUserInput, Prisma.TeacherUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutUserInput, Prisma.TeacherUncheckedCreateWithoutUserInput>
  where?: Prisma.TeacherWhereInput
}

export type TeacherUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.TeacherWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutUserInput, Prisma.TeacherUncheckedUpdateWithoutUserInput>
}

export type TeacherUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateWithoutSchoolInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutSchoolInput = {
  id?: string
  user_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutSchoolInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput>
}

export type TeacherCreateManySchoolInputEnvelope = {
  data: Prisma.TeacherCreateManySchoolInput | Prisma.TeacherCreateManySchoolInput[]
  skipDuplicates?: boolean
}

export type TeacherUpsertWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TeacherWhereUniqueInput
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutSchoolInput, Prisma.TeacherUncheckedUpdateWithoutSchoolInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSchoolInput, Prisma.TeacherUncheckedCreateWithoutSchoolInput>
}

export type TeacherUpdateWithWhereUniqueWithoutSchoolInput = {
  where: Prisma.TeacherWhereUniqueInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutSchoolInput, Prisma.TeacherUncheckedUpdateWithoutSchoolInput>
}

export type TeacherUpdateManyWithWhereWithoutSchoolInput = {
  where: Prisma.TeacherScalarWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateManyMutationInput, Prisma.TeacherUncheckedUpdateManyWithoutSchoolInput>
}

export type TeacherScalarWhereInput = {
  AND?: Prisma.TeacherScalarWhereInput | Prisma.TeacherScalarWhereInput[]
  OR?: Prisma.TeacherScalarWhereInput[]
  NOT?: Prisma.TeacherScalarWhereInput | Prisma.TeacherScalarWhereInput[]
  id?: Prisma.StringFilter<"Teacher"> | string
  user_id?: Prisma.StringFilter<"Teacher"> | string
  school_id?: Prisma.StringFilter<"Teacher"> | string
  created_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Teacher"> | Date | string
  deleted_at?: Prisma.DateTimeNullableFilter<"Teacher"> | Date | string | null
}

export type TeacherCreateWithoutSubjectsInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutSubjectsInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutSubjectsInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSubjectsInput, Prisma.TeacherUncheckedCreateWithoutSubjectsInput>
}

export type TeacherUpsertWithoutSubjectsInput = {
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutSubjectsInput, Prisma.TeacherUncheckedUpdateWithoutSubjectsInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSubjectsInput, Prisma.TeacherUncheckedCreateWithoutSubjectsInput>
  where?: Prisma.TeacherWhereInput
}

export type TeacherUpdateToOneWithWhereWithoutSubjectsInput = {
  where?: Prisma.TeacherWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutSubjectsInput, Prisma.TeacherUncheckedUpdateWithoutSubjectsInput>
}

export type TeacherUpdateWithoutSubjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutSubjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateWithoutSchedulesInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutSchedulesInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutSchedulesInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSchedulesInput, Prisma.TeacherUncheckedCreateWithoutSchedulesInput>
}

export type TeacherUpsertWithoutSchedulesInput = {
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutSchedulesInput, Prisma.TeacherUncheckedUpdateWithoutSchedulesInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutSchedulesInput, Prisma.TeacherUncheckedCreateWithoutSchedulesInput>
  where?: Prisma.TeacherWhereInput
}

export type TeacherUpdateToOneWithWhereWithoutSchedulesInput = {
  where?: Prisma.TeacherWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutSchedulesInput, Prisma.TeacherUncheckedUpdateWithoutSchedulesInput>
}

export type TeacherUpdateWithoutSchedulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutSchedulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateWithoutBehaviourInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutBehaviourInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Exam?: Prisma.ExamUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutBehaviourInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutBehaviourInput, Prisma.TeacherUncheckedCreateWithoutBehaviourInput>
}

export type TeacherUpsertWithoutBehaviourInput = {
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutBehaviourInput, Prisma.TeacherUncheckedUpdateWithoutBehaviourInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutBehaviourInput, Prisma.TeacherUncheckedCreateWithoutBehaviourInput>
  where?: Prisma.TeacherWhereInput
}

export type TeacherUpdateToOneWithWhereWithoutBehaviourInput = {
  where?: Prisma.TeacherWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutBehaviourInput, Prisma.TeacherUncheckedUpdateWithoutBehaviourInput>
}

export type TeacherUpdateWithoutBehaviourInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutBehaviourInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateWithoutExamInput = {
  id?: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  user: Prisma.UserCreateNestedOneWithoutTeacherInput
  school: Prisma.SchoolCreateNestedOneWithoutTeachersInput
  subjects?: Prisma.SubjectCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourCreateNestedManyWithoutTeacherInput
}

export type TeacherUncheckedCreateWithoutExamInput = {
  id?: string
  user_id: string
  school_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  subjects?: Prisma.SubjectUncheckedCreateNestedManyWithoutTeacherInput
  schedules?: Prisma.ScheduleUncheckedCreateNestedManyWithoutTeacherInput
  Behaviour?: Prisma.BehaviourUncheckedCreateNestedManyWithoutTeacherInput
}

export type TeacherCreateOrConnectWithoutExamInput = {
  where: Prisma.TeacherWhereUniqueInput
  create: Prisma.XOR<Prisma.TeacherCreateWithoutExamInput, Prisma.TeacherUncheckedCreateWithoutExamInput>
}

export type TeacherUpsertWithoutExamInput = {
  update: Prisma.XOR<Prisma.TeacherUpdateWithoutExamInput, Prisma.TeacherUncheckedUpdateWithoutExamInput>
  create: Prisma.XOR<Prisma.TeacherCreateWithoutExamInput, Prisma.TeacherUncheckedCreateWithoutExamInput>
  where?: Prisma.TeacherWhereInput
}

export type TeacherUpdateToOneWithWhereWithoutExamInput = {
  where?: Prisma.TeacherWhereInput
  data: Prisma.XOR<Prisma.TeacherUpdateWithoutExamInput, Prisma.TeacherUncheckedUpdateWithoutExamInput>
}

export type TeacherUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  school?: Prisma.SchoolUpdateOneRequiredWithoutTeachersNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutExamInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  school_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherCreateManySchoolInput = {
  id?: string
  user_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
}

export type TeacherUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  user?: Prisma.UserUpdateOneRequiredWithoutTeacherNestedInput
  subjects?: Prisma.SubjectUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  subjects?: Prisma.SubjectUncheckedUpdateManyWithoutTeacherNestedInput
  schedules?: Prisma.ScheduleUncheckedUpdateManyWithoutTeacherNestedInput
  Exam?: Prisma.ExamUncheckedUpdateManyWithoutTeacherNestedInput
  Behaviour?: Prisma.BehaviourUncheckedUpdateManyWithoutTeacherNestedInput
}

export type TeacherUncheckedUpdateManyWithoutSchoolInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type TeacherCountOutputType
 */

export type TeacherCountOutputType = {
  subjects: number
  schedules: number
  Exam: number
  Behaviour: number
}

export type TeacherCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  subjects?: boolean | TeacherCountOutputTypeCountSubjectsArgs
  schedules?: boolean | TeacherCountOutputTypeCountSchedulesArgs
  Exam?: boolean | TeacherCountOutputTypeCountExamArgs
  Behaviour?: boolean | TeacherCountOutputTypeCountBehaviourArgs
}

/**
 * TeacherCountOutputType without action
 */
export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeacherCountOutputType
   */
  select?: Prisma.TeacherCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TeacherCountOutputType without action
 */
export type TeacherCountOutputTypeCountSubjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubjectWhereInput
}

/**
 * TeacherCountOutputType without action
 */
export type TeacherCountOutputTypeCountSchedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduleWhereInput
}

/**
 * TeacherCountOutputType without action
 */
export type TeacherCountOutputTypeCountExamArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ExamWhereInput
}

/**
 * TeacherCountOutputType without action
 */
export type TeacherCountOutputTypeCountBehaviourArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BehaviourWhereInput
}


export type TeacherSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  school_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subjects?: boolean | Prisma.Teacher$subjectsArgs<ExtArgs>
  schedules?: boolean | Prisma.Teacher$schedulesArgs<ExtArgs>
  Exam?: boolean | Prisma.Teacher$ExamArgs<ExtArgs>
  Behaviour?: boolean | Prisma.Teacher$BehaviourArgs<ExtArgs>
  _count?: boolean | Prisma.TeacherCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacher"]>

export type TeacherSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  school_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacher"]>

export type TeacherSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  school_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teacher"]>

export type TeacherSelectScalar = {
  id?: boolean
  user_id?: boolean
  school_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
}

export type TeacherOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "school_id" | "created_at" | "updated_at" | "deleted_at", ExtArgs["result"]["teacher"]>
export type TeacherInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
  subjects?: boolean | Prisma.Teacher$subjectsArgs<ExtArgs>
  schedules?: boolean | Prisma.Teacher$schedulesArgs<ExtArgs>
  Exam?: boolean | Prisma.Teacher$ExamArgs<ExtArgs>
  Behaviour?: boolean | Prisma.Teacher$BehaviourArgs<ExtArgs>
  _count?: boolean | Prisma.TeacherCountOutputTypeDefaultArgs<ExtArgs>
}
export type TeacherIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}
export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  school?: boolean | Prisma.SchoolDefaultArgs<ExtArgs>
}

export type $TeacherPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Teacher"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    school: Prisma.$SchoolPayload<ExtArgs>
    subjects: Prisma.$SubjectPayload<ExtArgs>[]
    schedules: Prisma.$SchedulePayload<ExtArgs>[]
    Exam: Prisma.$ExamPayload<ExtArgs>[]
    Behaviour: Prisma.$BehaviourPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    user_id: string
    school_id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
  }, ExtArgs["result"]["teacher"]>
  composites: {}
}

export type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeacherPayload, S>

export type TeacherCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeacherCountAggregateInputType | true
  }

export interface TeacherDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
  /**
   * Find zero or one Teacher that matches the filter.
   * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
   * @example
   * // Get one Teacher
   * const teacher = await prisma.teacher.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeacherFindUniqueArgs>(args: Prisma.SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
   * @example
   * // Get one Teacher
   * const teacher = await prisma.teacher.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Teacher that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
   * @example
   * // Get one Teacher
   * const teacher = await prisma.teacher.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeacherFindFirstArgs>(args?: Prisma.SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Teacher that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
   * @example
   * // Get one Teacher
   * const teacher = await prisma.teacher.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Teachers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Teachers
   * const teachers = await prisma.teacher.findMany()
   * 
   * // Get first 10 Teachers
   * const teachers = await prisma.teacher.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeacherFindManyArgs>(args?: Prisma.SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Teacher.
   * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
   * @example
   * // Create one Teacher
   * const Teacher = await prisma.teacher.create({
   *   data: {
   *     // ... data to create a Teacher
   *   }
   * })
   * 
   */
  create<T extends TeacherCreateArgs>(args: Prisma.SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Teachers.
   * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
   * @example
   * // Create many Teachers
   * const teacher = await prisma.teacher.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeacherCreateManyArgs>(args?: Prisma.SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Teachers and returns the data saved in the database.
   * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
   * @example
   * // Create many Teachers
   * const teacher = await prisma.teacher.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Teachers and only return the `id`
   * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Teacher.
   * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
   * @example
   * // Delete one Teacher
   * const Teacher = await prisma.teacher.delete({
   *   where: {
   *     // ... filter to delete one Teacher
   *   }
   * })
   * 
   */
  delete<T extends TeacherDeleteArgs>(args: Prisma.SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Teacher.
   * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
   * @example
   * // Update one Teacher
   * const teacher = await prisma.teacher.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeacherUpdateArgs>(args: Prisma.SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Teachers.
   * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
   * @example
   * // Delete a few Teachers
   * const { count } = await prisma.teacher.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeacherDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teachers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Teachers
   * const teacher = await prisma.teacher.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeacherUpdateManyArgs>(args: Prisma.SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Teachers and returns the data updated in the database.
   * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
   * @example
   * // Update many Teachers
   * const teacher = await prisma.teacher.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Teachers and only return the `id`
   * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Teacher.
   * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
   * @example
   * // Update or create a Teacher
   * const teacher = await prisma.teacher.upsert({
   *   create: {
   *     // ... data to create a Teacher
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Teacher we want to update
   *   }
   * })
   */
  upsert<T extends TeacherUpsertArgs>(args: Prisma.SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma.Prisma__TeacherClient<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Teachers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
   * @example
   * // Count the number of Teachers
   * const count = await prisma.teacher.count({
   *   where: {
   *     // ... the filter for the Teachers we want to count
   *   }
   * })
  **/
  count<T extends TeacherCountArgs>(
    args?: Prisma.Subset<T, TeacherCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeacherCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Teacher.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeacherAggregateArgs>(args: Prisma.Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

  /**
   * Group by Teacher.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeacherGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeacherGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeacherGroupByArgs['orderBy'] }
      : { orderBy?: TeacherGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Teacher model
 */
readonly fields: TeacherFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Teacher.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  school<T extends Prisma.SchoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.SchoolDefaultArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  subjects<T extends Prisma.Teacher$subjectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Teacher$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  schedules<T extends Prisma.Teacher$schedulesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Teacher$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Exam<T extends Prisma.Teacher$ExamArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Teacher$ExamArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ExamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Behaviour<T extends Prisma.Teacher$BehaviourArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Teacher$BehaviourArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BehaviourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Teacher model
 */
export interface TeacherFieldRefs {
  readonly id: Prisma.FieldRef<"Teacher", 'String'>
  readonly user_id: Prisma.FieldRef<"Teacher", 'String'>
  readonly school_id: Prisma.FieldRef<"Teacher", 'String'>
  readonly created_at: Prisma.FieldRef<"Teacher", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Teacher", 'DateTime'>
  readonly deleted_at: Prisma.FieldRef<"Teacher", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Teacher findUnique
 */
export type TeacherFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter, which Teacher to fetch.
   */
  where: Prisma.TeacherWhereUniqueInput
}

/**
 * Teacher findUniqueOrThrow
 */
export type TeacherFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter, which Teacher to fetch.
   */
  where: Prisma.TeacherWhereUniqueInput
}

/**
 * Teacher findFirst
 */
export type TeacherFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter, which Teacher to fetch.
   */
  where?: Prisma.TeacherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teachers to fetch.
   */
  orderBy?: Prisma.TeacherOrderByWithRelationInput | Prisma.TeacherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Teachers.
   */
  cursor?: Prisma.TeacherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teachers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teachers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Teachers.
   */
  distinct?: Prisma.TeacherScalarFieldEnum | Prisma.TeacherScalarFieldEnum[]
}

/**
 * Teacher findFirstOrThrow
 */
export type TeacherFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter, which Teacher to fetch.
   */
  where?: Prisma.TeacherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teachers to fetch.
   */
  orderBy?: Prisma.TeacherOrderByWithRelationInput | Prisma.TeacherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Teachers.
   */
  cursor?: Prisma.TeacherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teachers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teachers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Teachers.
   */
  distinct?: Prisma.TeacherScalarFieldEnum | Prisma.TeacherScalarFieldEnum[]
}

/**
 * Teacher findMany
 */
export type TeacherFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter, which Teachers to fetch.
   */
  where?: Prisma.TeacherWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Teachers to fetch.
   */
  orderBy?: Prisma.TeacherOrderByWithRelationInput | Prisma.TeacherOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Teachers.
   */
  cursor?: Prisma.TeacherWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Teachers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Teachers.
   */
  skip?: number
  distinct?: Prisma.TeacherScalarFieldEnum | Prisma.TeacherScalarFieldEnum[]
}

/**
 * Teacher create
 */
export type TeacherCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * The data needed to create a Teacher.
   */
  data: Prisma.XOR<Prisma.TeacherCreateInput, Prisma.TeacherUncheckedCreateInput>
}

/**
 * Teacher createMany
 */
export type TeacherCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Teachers.
   */
  data: Prisma.TeacherCreateManyInput | Prisma.TeacherCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Teacher createManyAndReturn
 */
export type TeacherCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * The data used to create many Teachers.
   */
  data: Prisma.TeacherCreateManyInput | Prisma.TeacherCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Teacher update
 */
export type TeacherUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * The data needed to update a Teacher.
   */
  data: Prisma.XOR<Prisma.TeacherUpdateInput, Prisma.TeacherUncheckedUpdateInput>
  /**
   * Choose, which Teacher to update.
   */
  where: Prisma.TeacherWhereUniqueInput
}

/**
 * Teacher updateMany
 */
export type TeacherUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Teachers.
   */
  data: Prisma.XOR<Prisma.TeacherUpdateManyMutationInput, Prisma.TeacherUncheckedUpdateManyInput>
  /**
   * Filter which Teachers to update
   */
  where?: Prisma.TeacherWhereInput
  /**
   * Limit how many Teachers to update.
   */
  limit?: number
}

/**
 * Teacher updateManyAndReturn
 */
export type TeacherUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * The data used to update Teachers.
   */
  data: Prisma.XOR<Prisma.TeacherUpdateManyMutationInput, Prisma.TeacherUncheckedUpdateManyInput>
  /**
   * Filter which Teachers to update
   */
  where?: Prisma.TeacherWhereInput
  /**
   * Limit how many Teachers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Teacher upsert
 */
export type TeacherUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * The filter to search for the Teacher to update in case it exists.
   */
  where: Prisma.TeacherWhereUniqueInput
  /**
   * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
   */
  create: Prisma.XOR<Prisma.TeacherCreateInput, Prisma.TeacherUncheckedCreateInput>
  /**
   * In case the Teacher was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeacherUpdateInput, Prisma.TeacherUncheckedUpdateInput>
}

/**
 * Teacher delete
 */
export type TeacherDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  /**
   * Filter which Teacher to delete.
   */
  where: Prisma.TeacherWhereUniqueInput
}

/**
 * Teacher deleteMany
 */
export type TeacherDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Teachers to delete
   */
  where?: Prisma.TeacherWhereInput
  /**
   * Limit how many Teachers to delete.
   */
  limit?: number
}

/**
 * Teacher.subjects
 */
export type Teacher$subjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subject
   */
  select?: Prisma.SubjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subject
   */
  omit?: Prisma.SubjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubjectInclude<ExtArgs> | null
  where?: Prisma.SubjectWhereInput
  orderBy?: Prisma.SubjectOrderByWithRelationInput | Prisma.SubjectOrderByWithRelationInput[]
  cursor?: Prisma.SubjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SubjectScalarFieldEnum | Prisma.SubjectScalarFieldEnum[]
}

/**
 * Teacher.schedules
 */
export type Teacher$schedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  where?: Prisma.ScheduleWhereInput
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[]
  cursor?: Prisma.ScheduleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[]
}

/**
 * Teacher.Exam
 */
export type Teacher$ExamArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Exam
   */
  select?: Prisma.ExamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Exam
   */
  omit?: Prisma.ExamOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ExamInclude<ExtArgs> | null
  where?: Prisma.ExamWhereInput
  orderBy?: Prisma.ExamOrderByWithRelationInput | Prisma.ExamOrderByWithRelationInput[]
  cursor?: Prisma.ExamWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ExamScalarFieldEnum | Prisma.ExamScalarFieldEnum[]
}

/**
 * Teacher.Behaviour
 */
export type Teacher$BehaviourArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Behaviour
   */
  select?: Prisma.BehaviourSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Behaviour
   */
  omit?: Prisma.BehaviourOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BehaviourInclude<ExtArgs> | null
  where?: Prisma.BehaviourWhereInput
  orderBy?: Prisma.BehaviourOrderByWithRelationInput | Prisma.BehaviourOrderByWithRelationInput[]
  cursor?: Prisma.BehaviourWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BehaviourScalarFieldEnum | Prisma.BehaviourScalarFieldEnum[]
}

/**
 * Teacher without action
 */
export type TeacherDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
}
