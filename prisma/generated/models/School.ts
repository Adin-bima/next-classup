
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `School` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model School
 * 
 */
export type SchoolModel = runtime.Types.Result.DefaultSelection<Prisma.$SchoolPayload>

export type AggregateSchool = {
  _count: SchoolCountAggregateOutputType | null
  _min: SchoolMinAggregateOutputType | null
  _max: SchoolMaxAggregateOutputType | null
}

export type SchoolMinAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  admin_id: string | null
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

export type SchoolMaxAggregateOutputType = {
  id: string | null
  name: string | null
  address: string | null
  admin_id: string | null
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

export type SchoolCountAggregateOutputType = {
  id: number
  name: number
  address: number
  admin_id: number
  created_at: number
  updated_at: number
  deleted_at: number
  _all: number
}


export type SchoolMinAggregateInputType = {
  id?: true
  name?: true
  address?: true
  admin_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
}

export type SchoolMaxAggregateInputType = {
  id?: true
  name?: true
  address?: true
  admin_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
}

export type SchoolCountAggregateInputType = {
  id?: true
  name?: true
  address?: true
  admin_id?: true
  created_at?: true
  updated_at?: true
  deleted_at?: true
  _all?: true
}

export type SchoolAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which School to aggregate.
   */
  where?: Prisma.SchoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schools to fetch.
   */
  orderBy?: Prisma.SchoolOrderByWithRelationInput | Prisma.SchoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SchoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Schools
  **/
  _count?: true | SchoolCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SchoolMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SchoolMaxAggregateInputType
}

export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
      [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchool[P]>
    : Prisma.GetScalarType<T[P], AggregateSchool[P]>
}




export type SchoolGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SchoolWhereInput
  orderBy?: Prisma.SchoolOrderByWithAggregationInput | Prisma.SchoolOrderByWithAggregationInput[]
  by: Prisma.SchoolScalarFieldEnum[] | Prisma.SchoolScalarFieldEnum
  having?: Prisma.SchoolScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SchoolCountAggregateInputType | true
  _min?: SchoolMinAggregateInputType
  _max?: SchoolMaxAggregateInputType
}

export type SchoolGroupByOutputType = {
  id: string
  name: string
  address: string | null
  admin_id: string
  created_at: Date
  updated_at: Date
  deleted_at: Date | null
  _count: SchoolCountAggregateOutputType | null
  _min: SchoolMinAggregateOutputType | null
  _max: SchoolMaxAggregateOutputType | null
}

type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SchoolGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SchoolGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SchoolGroupByOutputType[P]>
      }
    >
  >



export type SchoolWhereInput = {
  AND?: Prisma.SchoolWhereInput | Prisma.SchoolWhereInput[]
  OR?: Prisma.SchoolWhereInput[]
  NOT?: Prisma.SchoolWhereInput | Prisma.SchoolWhereInput[]
  id?: Prisma.StringFilter<"School"> | string
  name?: Prisma.StringFilter<"School"> | string
  address?: Prisma.StringNullableFilter<"School"> | string | null
  admin_id?: Prisma.StringFilter<"School"> | string
  created_at?: Prisma.DateTimeFilter<"School"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"School"> | Date | string
  deleted_at?: Prisma.DateTimeNullableFilter<"School"> | Date | string | null
  admin?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  teachers?: Prisma.TeacherListRelationFilter
  students?: Prisma.StudentListRelationFilter
  classes?: Prisma.ClassListRelationFilter
  academic_years?: Prisma.AcademicYearListRelationFilter
}

export type SchoolOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  admin_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  admin?: Prisma.UserOrderByWithRelationInput
  teachers?: Prisma.TeacherOrderByRelationAggregateInput
  students?: Prisma.StudentOrderByRelationAggregateInput
  classes?: Prisma.ClassOrderByRelationAggregateInput
  academic_years?: Prisma.AcademicYearOrderByRelationAggregateInput
}

export type SchoolWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  admin_id?: string
  AND?: Prisma.SchoolWhereInput | Prisma.SchoolWhereInput[]
  OR?: Prisma.SchoolWhereInput[]
  NOT?: Prisma.SchoolWhereInput | Prisma.SchoolWhereInput[]
  name?: Prisma.StringFilter<"School"> | string
  address?: Prisma.StringNullableFilter<"School"> | string | null
  created_at?: Prisma.DateTimeFilter<"School"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"School"> | Date | string
  deleted_at?: Prisma.DateTimeNullableFilter<"School"> | Date | string | null
  admin?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  teachers?: Prisma.TeacherListRelationFilter
  students?: Prisma.StudentListRelationFilter
  classes?: Prisma.ClassListRelationFilter
  academic_years?: Prisma.AcademicYearListRelationFilter
}, "id" | "id" | "admin_id">

export type SchoolOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  admin_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.SchoolCountOrderByAggregateInput
  _max?: Prisma.SchoolMaxOrderByAggregateInput
  _min?: Prisma.SchoolMinOrderByAggregateInput
}

export type SchoolScalarWhereWithAggregatesInput = {
  AND?: Prisma.SchoolScalarWhereWithAggregatesInput | Prisma.SchoolScalarWhereWithAggregatesInput[]
  OR?: Prisma.SchoolScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SchoolScalarWhereWithAggregatesInput | Prisma.SchoolScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"School"> | string
  name?: Prisma.StringWithAggregatesFilter<"School"> | string
  address?: Prisma.StringNullableWithAggregatesFilter<"School"> | string | null
  admin_id?: Prisma.StringWithAggregatesFilter<"School"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"School"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"School"> | Date | string
  deleted_at?: Prisma.DateTimeNullableWithAggregatesFilter<"School"> | Date | string | null
}

export type SchoolCreateInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  admin: Prisma.UserCreateNestedOneWithoutSchoolInput
  teachers?: Prisma.TeacherCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherUncheckedCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  admin?: Prisma.UserUpdateOneRequiredWithoutSchoolNestedInput
  teachers?: Prisma.TeacherUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUncheckedUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUncheckedUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUncheckedUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUncheckedUpdateManyWithoutSchoolNestedInput
}

export type SchoolCreateManyInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
}

export type SchoolUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SchoolUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type SchoolNullableScalarRelationFilter = {
  is?: Prisma.SchoolWhereInput | null
  isNot?: Prisma.SchoolWhereInput | null
}

export type SchoolCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  admin_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type SchoolMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  admin_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type SchoolMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  address?: Prisma.SortOrder
  admin_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  deleted_at?: Prisma.SortOrder
}

export type SchoolScalarRelationFilter = {
  is?: Prisma.SchoolWhereInput
  isNot?: Prisma.SchoolWhereInput
}

export type SchoolCreateNestedOneWithoutAdminInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAdminInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUncheckedCreateNestedOneWithoutAdminInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAdminInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUpdateOneWithoutAdminNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAdminInput
  upsert?: Prisma.SchoolUpsertWithoutAdminInput
  disconnect?: Prisma.SchoolWhereInput | boolean
  delete?: Prisma.SchoolWhereInput | boolean
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutAdminInput, Prisma.SchoolUpdateWithoutAdminInput>, Prisma.SchoolUncheckedUpdateWithoutAdminInput>
}

export type SchoolUncheckedUpdateOneWithoutAdminNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAdminInput
  upsert?: Prisma.SchoolUpsertWithoutAdminInput
  disconnect?: Prisma.SchoolWhereInput | boolean
  delete?: Prisma.SchoolWhereInput | boolean
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutAdminInput, Prisma.SchoolUpdateWithoutAdminInput>, Prisma.SchoolUncheckedUpdateWithoutAdminInput>
}

export type SchoolCreateNestedOneWithoutTeachersInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutTeachersInput, Prisma.SchoolUncheckedCreateWithoutTeachersInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutTeachersInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUpdateOneRequiredWithoutTeachersNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutTeachersInput, Prisma.SchoolUncheckedCreateWithoutTeachersInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutTeachersInput
  upsert?: Prisma.SchoolUpsertWithoutTeachersInput
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutTeachersInput, Prisma.SchoolUpdateWithoutTeachersInput>, Prisma.SchoolUncheckedUpdateWithoutTeachersInput>
}

export type SchoolCreateNestedOneWithoutStudentsInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutStudentsInput, Prisma.SchoolUncheckedCreateWithoutStudentsInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutStudentsInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUpdateOneRequiredWithoutStudentsNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutStudentsInput, Prisma.SchoolUncheckedCreateWithoutStudentsInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutStudentsInput
  upsert?: Prisma.SchoolUpsertWithoutStudentsInput
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutStudentsInput, Prisma.SchoolUpdateWithoutStudentsInput>, Prisma.SchoolUncheckedUpdateWithoutStudentsInput>
}

export type SchoolCreateNestedOneWithoutClassesInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutClassesInput, Prisma.SchoolUncheckedCreateWithoutClassesInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutClassesInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUpdateOneRequiredWithoutClassesNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutClassesInput, Prisma.SchoolUncheckedCreateWithoutClassesInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutClassesInput
  upsert?: Prisma.SchoolUpsertWithoutClassesInput
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutClassesInput, Prisma.SchoolUpdateWithoutClassesInput>, Prisma.SchoolUncheckedUpdateWithoutClassesInput>
}

export type SchoolCreateNestedOneWithoutAcademic_yearsInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedCreateWithoutAcademic_yearsInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAcademic_yearsInput
  connect?: Prisma.SchoolWhereUniqueInput
}

export type SchoolUpdateOneRequiredWithoutAcademic_yearsNestedInput = {
  create?: Prisma.XOR<Prisma.SchoolCreateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedCreateWithoutAcademic_yearsInput>
  connectOrCreate?: Prisma.SchoolCreateOrConnectWithoutAcademic_yearsInput
  upsert?: Prisma.SchoolUpsertWithoutAcademic_yearsInput
  connect?: Prisma.SchoolWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SchoolUpdateToOneWithWhereWithoutAcademic_yearsInput, Prisma.SchoolUpdateWithoutAcademic_yearsInput>, Prisma.SchoolUncheckedUpdateWithoutAcademic_yearsInput>
}

export type SchoolCreateWithoutAdminInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateWithoutAdminInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherUncheckedCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolCreateOrConnectWithoutAdminInput = {
  where: Prisma.SchoolWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
}

export type SchoolUpsertWithoutAdminInput = {
  update: Prisma.XOR<Prisma.SchoolUpdateWithoutAdminInput, Prisma.SchoolUncheckedUpdateWithoutAdminInput>
  create: Prisma.XOR<Prisma.SchoolCreateWithoutAdminInput, Prisma.SchoolUncheckedCreateWithoutAdminInput>
  where?: Prisma.SchoolWhereInput
}

export type SchoolUpdateToOneWithWhereWithoutAdminInput = {
  where?: Prisma.SchoolWhereInput
  data: Prisma.XOR<Prisma.SchoolUpdateWithoutAdminInput, Prisma.SchoolUncheckedUpdateWithoutAdminInput>
}

export type SchoolUpdateWithoutAdminInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateWithoutAdminInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUncheckedUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUncheckedUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUncheckedUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUncheckedUpdateManyWithoutSchoolNestedInput
}

export type SchoolCreateWithoutTeachersInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  admin: Prisma.UserCreateNestedOneWithoutSchoolInput
  students?: Prisma.StudentCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateWithoutTeachersInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolCreateOrConnectWithoutTeachersInput = {
  where: Prisma.SchoolWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolCreateWithoutTeachersInput, Prisma.SchoolUncheckedCreateWithoutTeachersInput>
}

export type SchoolUpsertWithoutTeachersInput = {
  update: Prisma.XOR<Prisma.SchoolUpdateWithoutTeachersInput, Prisma.SchoolUncheckedUpdateWithoutTeachersInput>
  create: Prisma.XOR<Prisma.SchoolCreateWithoutTeachersInput, Prisma.SchoolUncheckedCreateWithoutTeachersInput>
  where?: Prisma.SchoolWhereInput
}

export type SchoolUpdateToOneWithWhereWithoutTeachersInput = {
  where?: Prisma.SchoolWhereInput
  data: Prisma.XOR<Prisma.SchoolUpdateWithoutTeachersInput, Prisma.SchoolUncheckedUpdateWithoutTeachersInput>
}

export type SchoolUpdateWithoutTeachersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  admin?: Prisma.UserUpdateOneRequiredWithoutSchoolNestedInput
  students?: Prisma.StudentUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateWithoutTeachersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  students?: Prisma.StudentUncheckedUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUncheckedUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUncheckedUpdateManyWithoutSchoolNestedInput
}

export type SchoolCreateWithoutStudentsInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  admin: Prisma.UserCreateNestedOneWithoutSchoolInput
  teachers?: Prisma.TeacherCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateWithoutStudentsInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherUncheckedCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolCreateOrConnectWithoutStudentsInput = {
  where: Prisma.SchoolWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolCreateWithoutStudentsInput, Prisma.SchoolUncheckedCreateWithoutStudentsInput>
}

export type SchoolUpsertWithoutStudentsInput = {
  update: Prisma.XOR<Prisma.SchoolUpdateWithoutStudentsInput, Prisma.SchoolUncheckedUpdateWithoutStudentsInput>
  create: Prisma.XOR<Prisma.SchoolCreateWithoutStudentsInput, Prisma.SchoolUncheckedCreateWithoutStudentsInput>
  where?: Prisma.SchoolWhereInput
}

export type SchoolUpdateToOneWithWhereWithoutStudentsInput = {
  where?: Prisma.SchoolWhereInput
  data: Prisma.XOR<Prisma.SchoolUpdateWithoutStudentsInput, Prisma.SchoolUncheckedUpdateWithoutStudentsInput>
}

export type SchoolUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  admin?: Prisma.UserUpdateOneRequiredWithoutSchoolNestedInput
  teachers?: Prisma.TeacherUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateWithoutStudentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUncheckedUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUncheckedUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUncheckedUpdateManyWithoutSchoolNestedInput
}

export type SchoolCreateWithoutClassesInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  admin: Prisma.UserCreateNestedOneWithoutSchoolInput
  teachers?: Prisma.TeacherCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateWithoutClassesInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherUncheckedCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutSchoolInput
  academic_years?: Prisma.AcademicYearUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolCreateOrConnectWithoutClassesInput = {
  where: Prisma.SchoolWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolCreateWithoutClassesInput, Prisma.SchoolUncheckedCreateWithoutClassesInput>
}

export type SchoolUpsertWithoutClassesInput = {
  update: Prisma.XOR<Prisma.SchoolUpdateWithoutClassesInput, Prisma.SchoolUncheckedUpdateWithoutClassesInput>
  create: Prisma.XOR<Prisma.SchoolCreateWithoutClassesInput, Prisma.SchoolUncheckedCreateWithoutClassesInput>
  where?: Prisma.SchoolWhereInput
}

export type SchoolUpdateToOneWithWhereWithoutClassesInput = {
  where?: Prisma.SchoolWhereInput
  data: Prisma.XOR<Prisma.SchoolUpdateWithoutClassesInput, Prisma.SchoolUncheckedUpdateWithoutClassesInput>
}

export type SchoolUpdateWithoutClassesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  admin?: Prisma.UserUpdateOneRequiredWithoutSchoolNestedInput
  teachers?: Prisma.TeacherUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateWithoutClassesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUncheckedUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUncheckedUpdateManyWithoutSchoolNestedInput
  academic_years?: Prisma.AcademicYearUncheckedUpdateManyWithoutSchoolNestedInput
}

export type SchoolCreateWithoutAcademic_yearsInput = {
  id?: string
  name: string
  address?: string | null
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  admin: Prisma.UserCreateNestedOneWithoutSchoolInput
  teachers?: Prisma.TeacherCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassCreateNestedManyWithoutSchoolInput
}

export type SchoolUncheckedCreateWithoutAcademic_yearsInput = {
  id?: string
  name: string
  address?: string | null
  admin_id: string
  created_at?: Date | string
  updated_at?: Date | string
  deleted_at?: Date | string | null
  teachers?: Prisma.TeacherUncheckedCreateNestedManyWithoutSchoolInput
  students?: Prisma.StudentUncheckedCreateNestedManyWithoutSchoolInput
  classes?: Prisma.ClassUncheckedCreateNestedManyWithoutSchoolInput
}

export type SchoolCreateOrConnectWithoutAcademic_yearsInput = {
  where: Prisma.SchoolWhereUniqueInput
  create: Prisma.XOR<Prisma.SchoolCreateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedCreateWithoutAcademic_yearsInput>
}

export type SchoolUpsertWithoutAcademic_yearsInput = {
  update: Prisma.XOR<Prisma.SchoolUpdateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedUpdateWithoutAcademic_yearsInput>
  create: Prisma.XOR<Prisma.SchoolCreateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedCreateWithoutAcademic_yearsInput>
  where?: Prisma.SchoolWhereInput
}

export type SchoolUpdateToOneWithWhereWithoutAcademic_yearsInput = {
  where?: Prisma.SchoolWhereInput
  data: Prisma.XOR<Prisma.SchoolUpdateWithoutAcademic_yearsInput, Prisma.SchoolUncheckedUpdateWithoutAcademic_yearsInput>
}

export type SchoolUpdateWithoutAcademic_yearsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  admin?: Prisma.UserUpdateOneRequiredWithoutSchoolNestedInput
  teachers?: Prisma.TeacherUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUpdateManyWithoutSchoolNestedInput
}

export type SchoolUncheckedUpdateWithoutAcademic_yearsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  admin_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deleted_at?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  teachers?: Prisma.TeacherUncheckedUpdateManyWithoutSchoolNestedInput
  students?: Prisma.StudentUncheckedUpdateManyWithoutSchoolNestedInput
  classes?: Prisma.ClassUncheckedUpdateManyWithoutSchoolNestedInput
}


/**
 * Count Type SchoolCountOutputType
 */

export type SchoolCountOutputType = {
  teachers: number
  students: number
  classes: number
  academic_years: number
}

export type SchoolCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teachers?: boolean | SchoolCountOutputTypeCountTeachersArgs
  students?: boolean | SchoolCountOutputTypeCountStudentsArgs
  classes?: boolean | SchoolCountOutputTypeCountClassesArgs
  academic_years?: boolean | SchoolCountOutputTypeCountAcademic_yearsArgs
}

/**
 * SchoolCountOutputType without action
 */
export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SchoolCountOutputType
   */
  select?: Prisma.SchoolCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SchoolCountOutputType without action
 */
export type SchoolCountOutputTypeCountTeachersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeacherWhereInput
}

/**
 * SchoolCountOutputType without action
 */
export type SchoolCountOutputTypeCountStudentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.StudentWhereInput
}

/**
 * SchoolCountOutputType without action
 */
export type SchoolCountOutputTypeCountClassesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClassWhereInput
}

/**
 * SchoolCountOutputType without action
 */
export type SchoolCountOutputTypeCountAcademic_yearsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AcademicYearWhereInput
}


export type SchoolSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  admin_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  teachers?: boolean | Prisma.School$teachersArgs<ExtArgs>
  students?: boolean | Prisma.School$studentsArgs<ExtArgs>
  classes?: boolean | Prisma.School$classesArgs<ExtArgs>
  academic_years?: boolean | Prisma.School$academic_yearsArgs<ExtArgs>
  _count?: boolean | Prisma.SchoolCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["school"]>

export type SchoolSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  admin_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["school"]>

export type SchoolSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  address?: boolean
  admin_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["school"]>

export type SchoolSelectScalar = {
  id?: boolean
  name?: boolean
  address?: boolean
  admin_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  deleted_at?: boolean
}

export type SchoolOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "address" | "admin_id" | "created_at" | "updated_at" | "deleted_at", ExtArgs["result"]["school"]>
export type SchoolInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  teachers?: boolean | Prisma.School$teachersArgs<ExtArgs>
  students?: boolean | Prisma.School$studentsArgs<ExtArgs>
  classes?: boolean | Prisma.School$classesArgs<ExtArgs>
  academic_years?: boolean | Prisma.School$academic_yearsArgs<ExtArgs>
  _count?: boolean | Prisma.SchoolCountOutputTypeDefaultArgs<ExtArgs>
}
export type SchoolIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type SchoolIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  admin?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $SchoolPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "School"
  objects: {
    admin: Prisma.$UserPayload<ExtArgs>
    teachers: Prisma.$TeacherPayload<ExtArgs>[]
    students: Prisma.$StudentPayload<ExtArgs>[]
    classes: Prisma.$ClassPayload<ExtArgs>[]
    academic_years: Prisma.$AcademicYearPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    address: string | null
    admin_id: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
  }, ExtArgs["result"]["school"]>
  composites: {}
}

export type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SchoolPayload, S>

export type SchoolCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SchoolCountAggregateInputType | true
  }

export interface SchoolDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
  /**
   * Find zero or one School that matches the filter.
   * @param {SchoolFindUniqueArgs} args - Arguments to find a School
   * @example
   * // Get one School
   * const school = await prisma.school.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SchoolFindUniqueArgs>(args: Prisma.SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one School that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
   * @example
   * // Get one School
   * const school = await prisma.school.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first School that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolFindFirstArgs} args - Arguments to find a School
   * @example
   * // Get one School
   * const school = await prisma.school.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SchoolFindFirstArgs>(args?: Prisma.SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first School that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
   * @example
   * // Get one School
   * const school = await prisma.school.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Schools that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Schools
   * const schools = await prisma.school.findMany()
   * 
   * // Get first 10 Schools
   * const schools = await prisma.school.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SchoolFindManyArgs>(args?: Prisma.SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a School.
   * @param {SchoolCreateArgs} args - Arguments to create a School.
   * @example
   * // Create one School
   * const School = await prisma.school.create({
   *   data: {
   *     // ... data to create a School
   *   }
   * })
   * 
   */
  create<T extends SchoolCreateArgs>(args: Prisma.SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Schools.
   * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
   * @example
   * // Create many Schools
   * const school = await prisma.school.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SchoolCreateManyArgs>(args?: Prisma.SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Schools and returns the data saved in the database.
   * @param {SchoolCreateManyAndReturnArgs} args - Arguments to create many Schools.
   * @example
   * // Create many Schools
   * const school = await prisma.school.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Schools and only return the `id`
   * const schoolWithIdOnly = await prisma.school.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SchoolCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SchoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a School.
   * @param {SchoolDeleteArgs} args - Arguments to delete one School.
   * @example
   * // Delete one School
   * const School = await prisma.school.delete({
   *   where: {
   *     // ... filter to delete one School
   *   }
   * })
   * 
   */
  delete<T extends SchoolDeleteArgs>(args: Prisma.SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one School.
   * @param {SchoolUpdateArgs} args - Arguments to update one School.
   * @example
   * // Update one School
   * const school = await prisma.school.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SchoolUpdateArgs>(args: Prisma.SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Schools.
   * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
   * @example
   * // Delete a few Schools
   * const { count } = await prisma.school.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SchoolDeleteManyArgs>(args?: Prisma.SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Schools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Schools
   * const school = await prisma.school.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SchoolUpdateManyArgs>(args: Prisma.SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Schools and returns the data updated in the database.
   * @param {SchoolUpdateManyAndReturnArgs} args - Arguments to update many Schools.
   * @example
   * // Update many Schools
   * const school = await prisma.school.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Schools and only return the `id`
   * const schoolWithIdOnly = await prisma.school.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SchoolUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SchoolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one School.
   * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
   * @example
   * // Update or create a School
   * const school = await prisma.school.upsert({
   *   create: {
   *     // ... data to create a School
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the School we want to update
   *   }
   * })
   */
  upsert<T extends SchoolUpsertArgs>(args: Prisma.SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma.Prisma__SchoolClient<runtime.Types.Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Schools.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
   * @example
   * // Count the number of Schools
   * const count = await prisma.school.count({
   *   where: {
   *     // ... the filter for the Schools we want to count
   *   }
   * })
  **/
  count<T extends SchoolCountArgs>(
    args?: Prisma.Subset<T, SchoolCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SchoolCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a School.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SchoolAggregateArgs>(args: Prisma.Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

  /**
   * Group by School.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SchoolGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SchoolGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SchoolGroupByArgs['orderBy'] }
      : { orderBy?: SchoolGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the School model
 */
readonly fields: SchoolFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for School.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  admin<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  teachers<T extends Prisma.School$teachersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.School$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  students<T extends Prisma.School$studentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.School$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  classes<T extends Prisma.School$classesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.School$classesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  academic_years<T extends Prisma.School$academic_yearsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.School$academic_yearsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AcademicYearPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the School model
 */
export interface SchoolFieldRefs {
  readonly id: Prisma.FieldRef<"School", 'String'>
  readonly name: Prisma.FieldRef<"School", 'String'>
  readonly address: Prisma.FieldRef<"School", 'String'>
  readonly admin_id: Prisma.FieldRef<"School", 'String'>
  readonly created_at: Prisma.FieldRef<"School", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"School", 'DateTime'>
  readonly deleted_at: Prisma.FieldRef<"School", 'DateTime'>
}
    

// Custom InputTypes
/**
 * School findUnique
 */
export type SchoolFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter, which School to fetch.
   */
  where: Prisma.SchoolWhereUniqueInput
}

/**
 * School findUniqueOrThrow
 */
export type SchoolFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter, which School to fetch.
   */
  where: Prisma.SchoolWhereUniqueInput
}

/**
 * School findFirst
 */
export type SchoolFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter, which School to fetch.
   */
  where?: Prisma.SchoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schools to fetch.
   */
  orderBy?: Prisma.SchoolOrderByWithRelationInput | Prisma.SchoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Schools.
   */
  cursor?: Prisma.SchoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Schools.
   */
  distinct?: Prisma.SchoolScalarFieldEnum | Prisma.SchoolScalarFieldEnum[]
}

/**
 * School findFirstOrThrow
 */
export type SchoolFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter, which School to fetch.
   */
  where?: Prisma.SchoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schools to fetch.
   */
  orderBy?: Prisma.SchoolOrderByWithRelationInput | Prisma.SchoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Schools.
   */
  cursor?: Prisma.SchoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schools.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Schools.
   */
  distinct?: Prisma.SchoolScalarFieldEnum | Prisma.SchoolScalarFieldEnum[]
}

/**
 * School findMany
 */
export type SchoolFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter, which Schools to fetch.
   */
  where?: Prisma.SchoolWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schools to fetch.
   */
  orderBy?: Prisma.SchoolOrderByWithRelationInput | Prisma.SchoolOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Schools.
   */
  cursor?: Prisma.SchoolWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schools from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schools.
   */
  skip?: number
  distinct?: Prisma.SchoolScalarFieldEnum | Prisma.SchoolScalarFieldEnum[]
}

/**
 * School create
 */
export type SchoolCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * The data needed to create a School.
   */
  data: Prisma.XOR<Prisma.SchoolCreateInput, Prisma.SchoolUncheckedCreateInput>
}

/**
 * School createMany
 */
export type SchoolCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Schools.
   */
  data: Prisma.SchoolCreateManyInput | Prisma.SchoolCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * School createManyAndReturn
 */
export type SchoolCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * The data used to create many Schools.
   */
  data: Prisma.SchoolCreateManyInput | Prisma.SchoolCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * School update
 */
export type SchoolUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * The data needed to update a School.
   */
  data: Prisma.XOR<Prisma.SchoolUpdateInput, Prisma.SchoolUncheckedUpdateInput>
  /**
   * Choose, which School to update.
   */
  where: Prisma.SchoolWhereUniqueInput
}

/**
 * School updateMany
 */
export type SchoolUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Schools.
   */
  data: Prisma.XOR<Prisma.SchoolUpdateManyMutationInput, Prisma.SchoolUncheckedUpdateManyInput>
  /**
   * Filter which Schools to update
   */
  where?: Prisma.SchoolWhereInput
  /**
   * Limit how many Schools to update.
   */
  limit?: number
}

/**
 * School updateManyAndReturn
 */
export type SchoolUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * The data used to update Schools.
   */
  data: Prisma.XOR<Prisma.SchoolUpdateManyMutationInput, Prisma.SchoolUncheckedUpdateManyInput>
  /**
   * Filter which Schools to update
   */
  where?: Prisma.SchoolWhereInput
  /**
   * Limit how many Schools to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * School upsert
 */
export type SchoolUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * The filter to search for the School to update in case it exists.
   */
  where: Prisma.SchoolWhereUniqueInput
  /**
   * In case the School found by the `where` argument doesn't exist, create a new School with this data.
   */
  create: Prisma.XOR<Prisma.SchoolCreateInput, Prisma.SchoolUncheckedCreateInput>
  /**
   * In case the School was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SchoolUpdateInput, Prisma.SchoolUncheckedUpdateInput>
}

/**
 * School delete
 */
export type SchoolDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
  /**
   * Filter which School to delete.
   */
  where: Prisma.SchoolWhereUniqueInput
}

/**
 * School deleteMany
 */
export type SchoolDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Schools to delete
   */
  where?: Prisma.SchoolWhereInput
  /**
   * Limit how many Schools to delete.
   */
  limit?: number
}

/**
 * School.teachers
 */
export type School$teachersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Teacher
   */
  select?: Prisma.TeacherSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Teacher
   */
  omit?: Prisma.TeacherOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeacherInclude<ExtArgs> | null
  where?: Prisma.TeacherWhereInput
  orderBy?: Prisma.TeacherOrderByWithRelationInput | Prisma.TeacherOrderByWithRelationInput[]
  cursor?: Prisma.TeacherWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TeacherScalarFieldEnum | Prisma.TeacherScalarFieldEnum[]
}

/**
 * School.students
 */
export type School$studentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Student
   */
  select?: Prisma.StudentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Student
   */
  omit?: Prisma.StudentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.StudentInclude<ExtArgs> | null
  where?: Prisma.StudentWhereInput
  orderBy?: Prisma.StudentOrderByWithRelationInput | Prisma.StudentOrderByWithRelationInput[]
  cursor?: Prisma.StudentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.StudentScalarFieldEnum | Prisma.StudentScalarFieldEnum[]
}

/**
 * School.classes
 */
export type School$classesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Class
   */
  select?: Prisma.ClassSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Class
   */
  omit?: Prisma.ClassOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClassInclude<ExtArgs> | null
  where?: Prisma.ClassWhereInput
  orderBy?: Prisma.ClassOrderByWithRelationInput | Prisma.ClassOrderByWithRelationInput[]
  cursor?: Prisma.ClassWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClassScalarFieldEnum | Prisma.ClassScalarFieldEnum[]
}

/**
 * School.academic_years
 */
export type School$academic_yearsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AcademicYear
   */
  select?: Prisma.AcademicYearSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AcademicYear
   */
  omit?: Prisma.AcademicYearOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AcademicYearInclude<ExtArgs> | null
  where?: Prisma.AcademicYearWhereInput
  orderBy?: Prisma.AcademicYearOrderByWithRelationInput | Prisma.AcademicYearOrderByWithRelationInput[]
  cursor?: Prisma.AcademicYearWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AcademicYearScalarFieldEnum | Prisma.AcademicYearScalarFieldEnum[]
}

/**
 * School without action
 */
export type SchoolDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the School
   */
  select?: Prisma.SchoolSelect<ExtArgs> | null
  /**
   * Omit specific fields from the School
   */
  omit?: Prisma.SchoolOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SchoolInclude<ExtArgs> | null
}
