/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PaginationReq: {
            /** @example 1 */
            page: number;
            /** @example 25 */
            limit: number;
        };
        PaginationRes: {
            /** @example 1 */
            page: number;
            /** @example 25 */
            limit: number;
            /** @example 100 */
            count: number;
        };
        Token: {
            accessToken: string;
            refreshToken: string;
            idToken: string;
        };
        AuthLoginReq: {
            identifier: string;
            password: string;
            deviceId: string;
        };
        AuthLoginRes: {
            code: string;
            message: string;
            data?: components["schemas"]["Token"];
        };
        LogoutReq: {
            deviceId: string;
        };
        LogoutRes: {
            code: string;
            message: string;
        };
        /** @enum {string} */
        EnumGender: "MALE" | "FEMALE";
        /** @enum {string} */
        EnumRole: "ADMIN" | "SCHOOL_ADMIN" | "TEACHER" | "PARENT";
        /** @enum {string} */
        EnumAttendanceStatus: "PRESENT" | "ABSENT" | "LATE" | "EXCUSED" | "SICK";
        /** @enum {string} */
        EnumDayOfWeek: "SUNDAY" | "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY";
        /** @enum {string} */
        EnumRemark: "EXCELLENT" | "GOOD" | "AVERAGE" | "BAD" | "POOR";
        BadRequestError: {
            /** @example common.bad_request */
            code: string;
            /** @example Bad request */
            message: string;
        };
        UnauthorizedError: {
            /** @example common.unauthorized */
            code: string;
            /** @example Unauthorized */
            message: string;
        };
        PaymentError: {
            /** @example common.payment_error */
            code: string;
            /** @example Payment error */
            message: string;
        };
        ForbiddenError: {
            /** @example common.forbidden */
            code: string;
            /** @example Forbidden */
            message: string;
        };
        NotFoundError: {
            /** @example common.not_found */
            code: string;
            /** @example Not found */
            message: string;
        };
        PayloadTooLargeError: {
            /** @example common.payload_too_large */
            code: string;
            /** @example Payload too large */
            message: string;
        };
        UnsupportedMediaTypeError: {
            /** @example common.unsupported_media_type */
            code: string;
            /** @example Unsupported media type */
            message: string;
        };
        UnprocessableEntityError: {
            /** @example common.unprocessable_entity */
            code: string;
            /** @example Unprocessable entity */
            message: string;
        };
        TooManyRequestsError: {
            /** @example common.too_many_requests */
            code: string;
            /** @example Too many requests */
            message: string;
        };
        InternalError: {
            /** @example common.internal */
            code: string;
            /** @example Internal server error */
            message: string;
        };
        NotImplementedError: {
            /** @example common.not_implemented */
            code: string;
            /** @example Not implemented */
            message: string;
        };
        ServiceUnavailableError: {
            /** @example common.service_unavailable */
            code: string;
            /** @example Service unavailable */
            message: string;
        };
    };
    responses: {
        /** @description Bad Request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BadRequestError"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UnauthorizedError"];
            };
        };
        /** @description Payment Error */
        PaymentError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PaymentError"];
            };
        };
        /** @description Forbidden */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ForbiddenError"];
            };
        };
        /** @description Not Found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NotFoundError"];
            };
        };
        /** @description Payload Too Large */
        PayloadTooLargeError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PayloadTooLargeError"];
            };
        };
        /** @description Unsupported Media Type */
        UnsupportedMediaTypeError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UnsupportedMediaTypeError"];
            };
        };
        /** @description Unprocessable Entity */
        UnprocessableEntityError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UnprocessableEntityError"];
            };
        };
        /** @description Too Many Requests */
        TooManyRequestsError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TooManyRequestsError"];
            };
        };
        /** @description Internal Server Error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["InternalError"];
            };
        };
        /** @description Not Implemented */
        NotImplementedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["NotImplementedError"];
            };
        };
        /** @description Service Unavailable */
        ServiceUnavailableError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ServiceUnavailableError"];
            };
        };
    };
    parameters: {
        /** @description The API key */
        ApiKeyParam: string;
        /** @description The bearer token */
        AuthTokenParam: string;
        /** @description The organization ID */
        OrgIdParam: string;
        /** @description The request ID */
        ReqIdParam: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
